package com.example.saulovera.proximatedemo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.saulovera.proximatedemo.dao.ProfileEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROFILE_ENTITY".
*/
public class ProfileEntityDao extends AbstractDao<ProfileEntity, Long> {

    public static final String TABLENAME = "PROFILE_ENTITY";

    /**
     * Properties of entity ProfileEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_server = new Property(1, String.class, "id_server", false, "ID_SERVER");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Apellidos = new Property(3, String.class, "apellidos", false, "APELLIDOS");
        public final static Property Correo = new Property(4, String.class, "correo", false, "CORREO");
        public final static Property Numero_documento = new Property(5, String.class, "numero_documento", false, "NUMERO_DOCUMENTO");
        public final static Property Ultima_sesion = new Property(6, String.class, "ultima_sesion", false, "ULTIMA_SESION");
        public final static Property Eliminado = new Property(7, String.class, "eliminado", false, "ELIMINADO");
        public final static Property Documentos_id = new Property(8, String.class, "documentos_id", false, "DOCUMENTOS_ID");
        public final static Property Documentos_label = new Property(9, String.class, "documentos_label", false, "DOCUMENTOS_LABEL");
        public final static Property Token = new Property(10, String.class, "token", false, "TOKEN");
        public final static Property Url_photo = new Property(11, String.class, "url_photo", false, "URL_PHOTO");
        public final static Property Activo = new Property(12, String.class, "activo", false, "ACTIVO");
        public final static Property LatPoint = new Property(13, Double.class, "latPoint", false, "LAT_POINT");
        public final static Property LongPoint = new Property(14, Double.class, "longPoint", false, "LONG_POINT");
    };


    public ProfileEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ProfileEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROFILE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ID_SERVER\" TEXT NOT NULL ," + // 1: id_server
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"APELLIDOS\" TEXT," + // 3: apellidos
                "\"CORREO\" TEXT," + // 4: correo
                "\"NUMERO_DOCUMENTO\" TEXT," + // 5: numero_documento
                "\"ULTIMA_SESION\" TEXT," + // 6: ultima_sesion
                "\"ELIMINADO\" TEXT," + // 7: eliminado
                "\"DOCUMENTOS_ID\" TEXT," + // 8: documentos_id
                "\"DOCUMENTOS_LABEL\" TEXT," + // 9: documentos_label
                "\"TOKEN\" TEXT," + // 10: token
                "\"URL_PHOTO\" TEXT," + // 11: url_photo
                "\"ACTIVO\" TEXT," + // 12: activo
                "\"LAT_POINT\" REAL," + // 13: latPoint
                "\"LONG_POINT\" REAL);"); // 14: longPoint
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROFILE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProfileEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getId_server());
        stmt.bindString(3, entity.getName());
 
        String apellidos = entity.getApellidos();
        if (apellidos != null) {
            stmt.bindString(4, apellidos);
        }
 
        String correo = entity.getCorreo();
        if (correo != null) {
            stmt.bindString(5, correo);
        }
 
        String numero_documento = entity.getNumero_documento();
        if (numero_documento != null) {
            stmt.bindString(6, numero_documento);
        }
 
        String ultima_sesion = entity.getUltima_sesion();
        if (ultima_sesion != null) {
            stmt.bindString(7, ultima_sesion);
        }
 
        String eliminado = entity.getEliminado();
        if (eliminado != null) {
            stmt.bindString(8, eliminado);
        }
 
        String documentos_id = entity.getDocumentos_id();
        if (documentos_id != null) {
            stmt.bindString(9, documentos_id);
        }
 
        String documentos_label = entity.getDocumentos_label();
        if (documentos_label != null) {
            stmt.bindString(10, documentos_label);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(11, token);
        }
 
        String url_photo = entity.getUrl_photo();
        if (url_photo != null) {
            stmt.bindString(12, url_photo);
        }
 
        String activo = entity.getActivo();
        if (activo != null) {
            stmt.bindString(13, activo);
        }
 
        Double latPoint = entity.getLatPoint();
        if (latPoint != null) {
            stmt.bindDouble(14, latPoint);
        }
 
        Double longPoint = entity.getLongPoint();
        if (longPoint != null) {
            stmt.bindDouble(15, longPoint);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProfileEntity readEntity(Cursor cursor, int offset) {
        ProfileEntity entity = new ProfileEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // id_server
            cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // apellidos
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // correo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // numero_documento
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ultima_sesion
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // eliminado
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // documentos_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // documentos_label
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // token
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // url_photo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // activo
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // latPoint
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14) // longPoint
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProfileEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_server(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setApellidos(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCorreo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNumero_documento(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUltima_sesion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEliminado(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDocumentos_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDocumentos_label(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setToken(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUrl_photo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setActivo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLatPoint(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setLongPoint(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ProfileEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ProfileEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
